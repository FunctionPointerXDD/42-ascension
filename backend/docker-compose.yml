services:
  nginx:
    init: true
    container_name: nginx
    build:
      context: ./nginx
      args:
       - DEV=true
    image: nginx
    restart: always
    networks:
      - postgresdb_network
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DOMAIN_NAME=pong.42.fr
      - CERTS_PATH=/etc/ssl/certs/nginx.crt
      - CERTS_KEY_PATH=/etc/ssl/private/nginx.pem
  backend:
    image: backend
    container_name: backend
    pull_policy: never
    build: ./django
    ports:
      - "8000:8000"
    networks:
      - postgresdb_network
    depends_on:
      db:
        condition: service_healthy
    tty: true
    init: true
    restart: always
    volumes:
      - ./django:/server
    env_file:
      - .env
  jwt:
    image: jwt
    container_name: jwt
    pull_policy: never
    build: ./jwt
    ports:
      - "8100:8100"
    networks:
      - postgresdb_network
    depends_on:
      db:
        condition: service_healthy
    tty: true
    init: true
    restart: always
    volumes:
      - ./jwt:/server
    env_file:
      - .env
  websocket:
    image: websocket
    container_name: websocket
    pull_policy: never
    build: ./websocket
    ports:
      - "7600:7600"
    networks:
      - postgresdb_network
    depends_on:
      db:
        condition: service_healthy
    tty: true
    init: true
    restart: always
    volumes:
      - ./websocket:/server
    environment:
      - WEBSOCKET_WORKER=${WEBSOCKET_WORKER}
      - WEBSOCKET_THREAD=${WEBSOCKET_THREAD}
    env_file:
      - .env
  auth:
    image: auth
    container_name: auth
    pull_policy: never
    build: ./auth
    ports:
      - "8200:8200"
    networks:
      - postgresdb_network
    depends_on:
      db:
        condition: service_healthy
    tty: true
    init: true
    restart: always
    volumes:
      - ./auth:/server
    env_file:
      - .env
  user:
    init: true
    container_name: user
    build:
      context: ./user
      args:
       - DEV=true
    image: user
    restart: always
    networks:
      - postgresdb_network
    ports:
      - "8300:8300"
    volumes:
      - ./user/server:/server
    env_file:
      - .env
  db:
    image: postgres:17.1-alpine3.20
    container_name: postgresdb
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - postgresdb_network
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 30s
      timeout: 10s
      retries: 5
  prometheus:
    build: ./prometheus
    volumes:
      - ./prometheus/config:/etc/prometheus
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"

networks:
  postgresdb_network:
    driver: bridge

volumes:
  prometheus-data:
  postgresql-data:
